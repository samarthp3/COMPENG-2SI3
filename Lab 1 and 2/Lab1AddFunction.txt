HugeInteger HugeInteger::add(const HugeInteger& h) {
    
    int carry = 0;
    int sum = 0;

    int digit1_size = intList.size();
    int digit2_size = h.intList.size();
    
    //find which HugeInteger is larger
    int limit = digit1_size > digit2_size ? digit1_size : digit2_size;              
    
    for (int i = 0; i < limit; i++) {
        // Get the current digits from both numbers. These ternary statements either get the value of the digit at the ith element or or assign it 0 if their size is smaller than i.
        int digit1 = i < digit1_size ? intList[digit1_size - i - 1] : 0;
        int digit2 = i < digit2_size ? h.intList[digit2_size - i - 1] : 0;

        // Add the digits and the carry value
        sum = digit1 + digit2 + carry;
        
        // Check if there is a carry value
        if (sum >= 10) {
            carry = 1;
            sum -= 10;
        }
        else {
            carry = 0;
            }

        // Add the sum to the result list
        resultList.push_back(sum);
    }

    // If there is still a carry value, add it to the result list
    if (carry == 1) {
        resultList.push_back(carry);
    }
    
    int j = resultList.size() - 1;

    for (int a = 0; a < (resultList.size() / 2); a++)
    {
        int temp = resultList[a];
        resultList[a] = resultList[j];
        resultList[j] = temp;
        j--;
    }

    // Convert the result list to a string and return a new HugeInteger
    std::string result = "";
    for (int i = 0; i < resultList.size(); i++) {
        result += std::to_string(resultList[i]);
    }
    
    return HugeInteger(result);

}